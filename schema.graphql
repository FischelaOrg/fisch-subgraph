type Loan @entity(immutable: true) {
  id: ID!
  loanId: BigInt
  innitialLendAmount: BigInt
  currentAvailableLendAmount: BigInt!
  amountRepaid: BigInt
  borrowerId: BigInt
  interestRate: BigInt
  loanOutDuration: BigInt
  locked: Boolean
  isActive: Boolean
  lender: User
  loanDurationInMonthCount: BigInt
}

type Borrow @entity(immutable: true) {
  id: ID!
  borrowerId: BigInt
  borrower: User
  innitialBorrowAmount: BigInt
  currentBorrowAmount: BigInt
  amountAlreadyRemitted: BigInt
  deadline: BigInt
  interest: BigInt
  lenderId: BigInt
  lender: User!
  nftCollateralTokenId: BigInt
  receiverAddress: User
  isApproved: Boolean
  isRepaid: Boolean
}

type Asset @entity(immutable: true) {
  id: ID!
  tokenId: BigInt! # uint256
  owner: User
  title: String
  description: String
  tokenId: BigInt
  price: BigInt
  assetURI: String
  revenue: BigInt
  expenses: BigInt
  traffic: BigInt
  productLink: String
  isFrozen: Boolean
  ownerEmail: String
  isCollateral: Boolean
}

type Auction @entity(immutable: true) {
  id: ID!
  auctionId: BigInt!
  tokenId: BigInt!
  seller: User
  startTime: BigInt
  endTime: BigInt
  reservePrice: BigInt
  started: Boolean
  resulted: Boolean
  buyer: User
  confirmed: Boolean
}

type Bid @entity(immutable: true) {
  id: ID!
  bid: BigInt
  bidder: User
  bidTime: BigInt
  auctionId: BigInt
}

type User @entity(immutable: true){
  id: ID!
  loans: [Loan!] @derivedFrom(field: "lender")
  borrows: [Borrow!] @derivedFrom(field: "borrower")
  assets: [Asset!] @derivedFrom(field: "owner")
  bids: [Bid!] @derivedFrom(field: "bidder")
}